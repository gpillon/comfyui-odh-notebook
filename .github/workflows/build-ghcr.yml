name: Build and Push ComfyUI Images

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      variant:
        description: 'Specific variant to build (leave empty for all)'
        required: false
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      variants: ${{ steps.variants.outputs.variants }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      # - name: Free Disk Space (Ubuntu)
      #   uses: jlumbroso/free-disk-space@main
      #   with:
      #     # this might remove tools that are actually needed,
      #     # if set to "true" but frees about 6 GB
      #     tool-cache: false
          
      #     # all of these default to true, but feel free to set to
      #     # "false" if necessary for your workflow
      #     android: true
      #     dotnet: true
      #     haskell: true
      #     large-packages: true
      #     docker-images: true
      #     swap-storage: true
      
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jinja2

      - name: Generate Containerfiles
        run: |
          mkdir -p build/containerfiles
          if [ -n "${{ github.event.inputs.variant }}" ]; then
            python build/generate_containerfile.py --variant ${{ github.event.inputs.variant }}
          else
            python build/generate_containerfile.py
          fi

      - name: Extract metadata
        id: meta
        run: |
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Get variants for matrix
        id: variants
        run: |
          # Load configuration and get variants
          if [ -n "${{ github.event.inputs.variant }}" ]; then
            VARIANTS=$(python -c "
          import yaml, json
          config = yaml.safe_load(open('build-config.yaml'))
          variants = [v for v in config['variants'] if v['name'] == '${{ github.event.inputs.variant }}']
          print(json.dumps(variants))
          ")
          else
            VARIANTS=$(python -c "
          import yaml, json
          config = yaml.safe_load(open('build-config.yaml'))
          print(json.dumps(config['variants']))
          ")
          fi
          echo "variants=$VARIANTS" >> $GITHUB_OUTPUT

      - name: Upload Containerfiles
        uses: actions/upload-artifact@v4
        with:
          name: containerfiles
          path: build/containerfiles/
          retention-days: 1

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant: ${{ fromJson(needs.prepare.outputs.variants) }}
      fail-fast: false
    
    outputs:
      build_status: ${{ steps.set_build_status.outputs.status }}
      built_variants: ${{ steps.set_build_status.outputs.built_variants }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Containerfiles
        uses: actions/download-artifact@v4
        with:
          name: containerfiles
          path: build/containerfiles/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract build configuration
        id: config
        run: |
          python -c "
          import yaml, os
          config = yaml.safe_load(open('build-config.yaml'))
          registry = 'ghcr.io/${{ github.repository_owner }}'
          repo = config['build']['repository']
          print(f'REGISTRY={registry}')
          print(f'REPO={repo}')
          " >> $GITHUB_ENV

      - name: Build and push ${{ matrix.variant.name }} image
        id: build_push
        continue-on-error: true
        run: |
          NAME="${{ matrix.variant.name }}"
          TAG="${{ matrix.variant.tag }}"
          VERSION="${{ needs.prepare.outputs.version }}"
          
          # Image tags
          IMAGE_TAGS=(
            "${REGISTRY}/${REPO}-${NAME}:${TAG}"
            "${REGISTRY}/${REPO}-${NAME}:${VERSION}"
          )
          
          # If this is the latest version, add latest tag
          if [ "$VERSION" == "latest" ]; then
            IMAGE_TAGS+=("${REGISTRY}/${REPO}-${NAME}:latest")
          fi
          
          # Build Docker command
          DOCKER_CMD=(
            "docker" "buildx" "build"
            "--platform" "linux/amd64"
            "--push"
          )
          
          # Add tags
          for tag in "${IMAGE_TAGS[@]}"; do
            DOCKER_CMD+=("-t" "$tag")
          done
          
          # Add Containerfile
          DOCKER_CMD+=("-f" "build/containerfiles/Containerfile.${NAME}" ".")
          
          # Execute build
          echo "Building and pushing ${NAME}..."
          echo "Command: ${DOCKER_CMD[*]}"
          "${DOCKER_CMD[@]}"
      
      - name: Set build status
        id: set_build_status
        if: always()
        run: |
          if [ "${{ steps.build_push.outcome }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "built_variants=${{ matrix.variant.name }}" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "built_variants=" >> $GITHUB_OUTPUT
          fi

  generate-manifests:
    needs: [prepare, build]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Generate manifests
        run: |
          mkdir -p build/manifests
          
          # Get successful variants
          SUCCESSFUL_VARIANTS=$(python -c "
          import yaml, json, os
          
          # Load config
          with open('build-config.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          # Get all variants
          all_variants = [v['name'] for v in config['variants']]
          
          # Filter only successful variants based on input
          variant = os.environ.get('GITHUB_EVENT_INPUTS_VARIANT')
          if variant:
              successful_variants = [variant]
          else:
              successful_variants = all_variants
          
          # Print as comma-separated list
          print(','.join(successful_variants))
          ")
          
          # Generate manifests only for successful builds
          if [ -n "$SUCCESSFUL_VARIANTS" ]; then
            for VARIANT in $(echo $SUCCESSFUL_VARIANTS | tr ',' ' '); do
              echo "Generating manifest for $VARIANT"
              python build/generate_manifest.py --variant $VARIANT
            done
          else
            echo "No successful builds to generate manifests for"
          fi

      - name: Upload manifests as artifacts
        if: ${{ hashFiles('build/manifests/*') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: manifests
          path: build/manifests/
          retention-days: 7

      - name: Upload manifests to release
        if: startsWith(github.ref, 'refs/tags/v') && hashFiles('build/manifests/*') != ''
        uses: softprops/action-gh-release@v1
        with:
          files: build/manifests/*
          token: ${{ secrets.GITHUB_TOKEN }}
